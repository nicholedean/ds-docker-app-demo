AWSConfigurationTemplateVersion: 1.1.0.0
SolutionStack: 64bit Amazon Linux 2017.03 v2.7.4 running Docker 17.03.2-ce
Tags:
  Environment: dev
  Application: Test Automation
OptionSettings:
  AWSEBLoadBalancerSecurityGroup.aws:ec2:vpc:
    VPCId: {my_vpc}
  aws:autoscaling:asg:
    Availability Zones: Any
    Cooldown: '0'
    MaxSize: '4'
    MinSize: '2'
  aws:autoscaling:launchconfiguration:
    IamInstanceProfile: aws-elasticbeanstalk-ec2-role
    ImageId: ami-9cbad9ff
    InstanceType: t2.micro
    MonitoringInterval: 5 minute
    SSHSourceRestriction: tcp,22,22,0.0.0.0/0
    SecurityGroups: {my_sg}
  aws:autoscaling:updatepolicy:rollingupdate:
    RollingUpdateEnabled: 'false'
    RollingUpdateType: Time
    Timeout: PT30M
  aws:ec2:vpc:
    AssociatePublicIpAddress: 'false'
    ELBScheme: internal
    ELBSubnets: [my_subnets]
    Subnets: [my_subnets]
  aws:elasticbeanstalk:application:
    Application Healthcheck URL: ''
  aws:elasticbeanstalk:cloudwatch:logs:
    DeleteOnTerminate: 'false'
    RetentionInDays: '7'
    StreamLogs: 'true'
  aws:elasticbeanstalk:command:
    BatchSize: '2'
    BatchSizeType: Fixed
    DeploymentPolicy: Rolling
    IgnoreHealthCheck: 'false'
    Timeout: '600'
  aws:elasticbeanstalk:control:
    DefaultSSHPort: '22'
    LaunchTimeout: '0'
    LaunchType: Migration
    RollbackLaunchOnFailure: 'false'
  aws:elasticbeanstalk:environment:
    EnvironmentType: LoadBalanced
    LoadBalancerType: classic
    ServiceRole: aws-elasticbeanstalk-service-role
  aws:elasticbeanstalk:monitoring:
    Automatically Terminate Unhealthy Instances: 'true'
  aws:elb:healthcheck:
    HealthyThreshold: '3'
    Interval: '10'
    Target: TCP:80
    Timeout: '5'
    UnhealthyThreshold: '5'
  aws:elb:listener:80:
    InstancePort: '80'
    InstanceProtocol: HTTP
    ListenerEnabled: 'true'
    ListenerProtocol: HTTP
  aws:elb:loadbalancer:
    CrossZone: 'true'
    LoadBalancerHTTPPort: '80'
    LoadBalancerHTTPSPort: 'OFF'
    LoadBalancerPortProtocol: HTTP
    LoadBalancerSSLPortProtocol: HTTPS
    SecurityGroups: {my_sg}
  aws:elb:policies:
    ConnectionDrainingEnabled: 'false'
    ConnectionDrainingTimeout: '20'
    ConnectionSettingIdleTimeout: '60'